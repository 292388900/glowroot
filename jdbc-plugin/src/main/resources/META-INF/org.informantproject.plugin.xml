<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2012 the original author or authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<plugin xmlns="http://www.informantproject.org/plugin/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.informantproject.org/plugin/1.0 http://www.informantproject.org/xsd/plugin-1.0.xsd">

    <name>Jdbc Plugin</name>
    <groupId>org.informantproject.plugins</groupId>
    <artifactId>jdbc-plugin</artifactId>
    <version>0.5-SNAPSHOT</version>
    <properties>
      <property>
        <prompt>Capture timing metrics for ResultSet.next()</prompt>
        <name>captureResultSetNext</name>
        <type>boolean</type>
        <default>true</default>
        <description>
          Capture timing metrics for executions of ResultSet.next() to read the next record in a
          result set. This defaults to true since the timing for this metric is a good indication of
          jdbc fetch size issues and database latency, but it can be disabled if it is common to
          return millions of records and the overhead of System.nanoTime() becomes relevant.
        </description>
      </property>
      <property>
        <prompt>Capture timing metrics for ResultSet.get*()</prompt>
        <name>captureResultSetGet</name>
        <type>boolean</type>
        <description>
          Capture timing metrics for executions of ResultSet.get*() to read the individual column
          values out of a result set record. This defaults to false since the number of calls can be
          excessive and generally ResultSet.next() captures more interesting info with less
          overhead.
        </description>
      </property>
    </properties>
    <aspects>
      <aspect>org.informantproject.plugin.jdbc.JdbcAspect</aspect>
    </aspects>
</plugin>
