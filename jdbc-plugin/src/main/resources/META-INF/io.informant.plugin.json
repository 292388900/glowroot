{
  "name": "Jdbc Plugin",
  "id": "jdbc",
  "version": "0.5-SNAPSHOT",
  "properties": [
    {
      "prompt": "ResultSet.next() metrics",
      "name": "captureResultSetNext",
      "type": "boolean",
      "default": true,
      "description": [
        "Capture timing metrics for executions of ResultSet.next() to read the next record in a",
        " result set. This defaults to true since the timing for this metric is a good indication",
        " of jdbc fetch size issues and database latency, but it can be disabled if it is common",
        " to return millions of records and the overhead of System.nanoTime() becomes relevant."
      ]
    },
    {
      "prompt": "ResultSet.get*() metrics",
      "name": "captureResultSetGet",
      "type": "boolean",
      "default": false,
      "description": [
        "Capture timing metrics for executions of ResultSet.get*() to read the individual column",
        " values out of a result set record. This defaults to false since the number of calls can",
        " be excessive and generally ResultSet.next() captures more interesting info with less",
        " overhead."
      ]
    },
    {
      "prompt": "DatabaseMetaData.*() spans",
      "name": "captureDatabaseMetaDataSpans",
      "type": "boolean",
      "description": "Capture spans for executions of DatabaseMetaData.*()"
    },
    {
      "prompt": "Stack trace threshold (millis)",
      "name": "stackTraceThresholdMillis",
      "type": "double",
      "default": null,
      "description": [
        "Any jdbc call that exceeds this threshold will have a stack trace captured and attached",
        " to it. An empty value will not collect any stack traces, a zero value will collect a",
        " stack trace for every jdbc call."
      ]
    },
    {
      "prompt": "Capture bind parameters",
      "name": "captureBindParameters",
      "type": "boolean",
      "description": [
        "Capture jdbc bind parameters for PreparedStatement executions. This is disabled by",
        " default as it can cause Informant to capture potentially secure data, e.g. account",
        " data being stored to an account table."
      ]
    }
  ],
  "aspects": [
    "io.informant.plugin.jdbc.DatabaseMetaDataAspect",
    "io.informant.plugin.jdbc.StatementAspect",
    "io.informant.plugin.jdbc.ResultSetAspect",
    "io.informant.plugin.jdbc.ConnectionAspect"
  ]
}
