<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>

  <groupId>org.glowroot</groupId>
  <artifactId>glowroot-parent</artifactId>
  <version>0.5-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Glowroot Parent Project</name>
  <description>Glowroot Parent Project</description>
  <url>http://glowroot.github.com</url>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <prerequisites>
    <maven>3.0</maven>
  </prerequisites>

  <modules>
    <module>plugin-api</module>
    <module>core</module>
    <module>test-container</module>
    <module>plugin-testkit</module>
    <module>packager-maven-plugin</module>
    <module>integration-tests</module>
    <module>webdriver-tests</module>
    <module>ui-testing</module>
    <module>servlet-plugin</module>
    <module>jdbc-plugin</module>
    <module>package</module>
  </modules>

  <scm>
    <connection>scm:git:https://github.com/glowroot/glowroot.git</connection>
    <developerConnection>scm:git:git@github.com:glowroot/glowroot.git</developerConnection>
    <url>https://github.com/glowroot/glowroot</url>
  </scm>

  <properties>
    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
    <sonar.jacoco.reportPath>${basedir}/../target/jacoco-combined.exec</sonar.jacoco.reportPath>
  </properties>

  <build>
    <!-- this property is just for supporting sonar analysis of javascript files -->
    <sourceDirectory>${source.directory}</sourceDirectory>
    <plugins>
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.0</version>
                </requireMavenVersion>
                <requirePluginVersions>
                  <!-- banSnapshots is overridden and set to true in release profile -->
                  <banSnapshots>false</banSnapshots>
                </requirePluginVersions>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--
          ensure that only methods available in jdk 5 can
          be used even when compiling with a more recent jdk
        -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>1.9</version>
        <configuration>
          <signature>
            <groupId>org.codehaus.mojo.signature</groupId>
            <artifactId>java15</artifactId>
            <version>1.0</version>
          </signature>
        </configuration>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.1</version>
          <configuration>
            <source>1.5</source>
            <target>1.5</target>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>2.5</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>2.16</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.4</version>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.6</version>
        </plugin>
        <plugin>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>3.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.3</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.16</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <profiles>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-enforcer-plugin</artifactId>
            <configuration>
              <rules>
                <requirePluginVersions>
                  <!-- overrides more lenient banShapshots=false allowed prior to release -->
                  <banSnapshots>true</banSnapshots>
                </requirePluginVersions>
                <requireJavaVersion>
                  <version>[1.5,1.6)</version>
                </requireJavaVersion>
                <requireNoRepositories />
                <requireReleaseDeps />
                <requireReleaseVersion />
                <requireUpperBoundDeps />
              </rules>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>checker</id>
      <dependencies>
        <dependency>
          <!-- guava uses these annotations but makes the dependency optional so
               they need to be explicitly added when running the checker framework
               otherwise it errors on code that invokes Splitter.omitEmptyStrings()
               (e.g. org.glowroot.jvm.HeapHistograms) and probably elsewhere -->
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
          <version>2.0.2</version>
          <optional>true</optional>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <!-- running checker framework check requires jdk7 -->
            <groupId>edu.washington.cs.types.checker</groupId>
            <artifactId>checker-maven-plugin</artifactId>
            <version>1.7.1</version>
            <executions>
              <execution>
                <phase>process-classes</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <processors>
                <processor>checkers.nullness.NullnessChecker</processor>
                <!--processor>checkers.igj.IGJChecker</processor-->
              </processors>
              <procOnly>false</procOnly>
              <!-- implicit imports for commented out uses of /*@Nullable*/, etc -->
              <!-- TODO test without implicit imports, maybe fixed now in 1.7.1?? -->
              <javaParams>
                -Djsr308_imports=checkers.nullness.quals.*${path.separator}checkers.igj.quals.*
              </javaParams>
              <javacParams>
                -Astubs=${basedir}/../core/src/main/stubs
              </javacParams>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- this profile should be activated using -Djacoco since the presence of that property will
        disable class shading and proguard-ing in core/pom.xml, otherwise the bytecode changes done
        to the classes during shading and proguard-ing will modify the jacoco class id and the sonar
        reports won't report usage of those bytecode modified classes. -->
      <id>active-this-profile-using-the-jacoco-property</id>
      <activation>
        <property>
          <name>jacoco</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.6.4.201312101107</version>
            <configuration>
              <destFile>${basedir}/../target/jacoco-combined.exec</destFile>
            </configuration>
            <executions>
              <execution>
                <id>prepare-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>not-sonar-javascript</id>
      <activation>
        <property>
          <name>sonar.language</name>
          <value>!js</value>
        </property>
      </activation>
      <properties>
        <source.directory>src/main/java</source.directory>
      </properties>
    </profile>
    <profile>
      <id>sonar-javascript</id>
      <activation>
        <property>
          <name>sonar.language</name>
          <value>js</value>
        </property>
      </activation>
      <properties>
        <source.directory>src/main/resources</source.directory>
        <sonar.branch>Javascript</sonar.branch>
        <sonar.exclusions>org/glowroot/local/ui/app/components/**</sonar.exclusions>
      </properties>
    </profile>
  </profiles>
</project>
