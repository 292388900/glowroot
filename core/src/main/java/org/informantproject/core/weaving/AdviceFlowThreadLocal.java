/**
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.informantproject.core.weaving;

import javax.annotation.concurrent.ThreadSafe;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;

/**
 * @author Trask Stalnaker
 * @since 0.5
 */
// used by generated bytecode
@ThreadSafe
public class AdviceFlowThreadLocal extends ThreadLocal<Boolean> {

    // runtime cache of AdviceFlowThreadLocal for Advice with Pointcut.captureNested() "false".
    // a given AdviceFlowThreadLocal is shared across all of a given advice's pointcuts.
    // the call to getSharedInstance() is cached in a woven class's static initializer in order to
    // minimize the semi-expensive cache lookup
    private static LoadingCache<Class<?>, AdviceFlowThreadLocal> sharedThreadLocals = CacheBuilder
            .newBuilder().build(new CacheLoader<Class<?>, AdviceFlowThreadLocal>() {
                @Override
                public AdviceFlowThreadLocal load(Class<?> key) {
                    return new AdviceFlowThreadLocal();
                }
            });

    // used by generated bytecode
    public static AdviceFlowThreadLocal getSharedInstance(Class<?> adviceClass) {
        return sharedThreadLocals.getUnchecked(adviceClass);
    }

    private AdviceFlowThreadLocal() {}

    public boolean isTop() {
        return get();
    }

    public void setTop(boolean value) {
        set(value);
    }

    @Override
    protected Boolean initialValue() {
        return true;
    }
}
