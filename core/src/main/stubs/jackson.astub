import checkers.igj.quals.*;
import checkers.nullness.quals.*;

/* ========================================================================== */
package com.fasterxml.jackson.core;

public class JsonGenerator {
    public void writeString(@Nullable String text);
    public void writeStringField(String fieldName, @Nullable String value);
}

public class JsonFactory {
    public JsonGenerator createGenerator(Writer out) @ReadOnly;
}

/* ========================================================================== */
package com.fasterxml.jackson.databind;

public class JsonDeserializer<T> {
    public @Nullable T deserialize(JsonParser jp, DeserializationContext ctxt);
}

public class ObjectMapper {
    public JsonNode readTree(String content) @ReadOnly;
    public <T extends @Nullable Object> T treeToValue(TreeNode n, Class<T> valueType) @ReadOnly;
    public @I JsonFactory getFactory() @I;
    public ObjectWriter writerWithView(Class<?> serializationView) @ReadOnly;
    public <T extends @Nullable Object> T readValue(String content, Class<T> valueType) @ReadOnly;
    public <T extends @Nullable Object> T readValue(File src, Class<T> valueType) @ReadOnly;
    public String writeValueAsString(@ReadOnly Object value) @ReadOnly;
    public ObjectNode createObjectNode() @ReadOnly;
    public ObjectNode createArrayNode() @ReadOnly;
    public ObjectReader readerForUpdating(Object valueToUpdate) @ReadOnly;
    public <T extends @Nullable Object> T convertValue(@Nullable Object fromValue,
            Class<T> toValueType) @ReadOnly;
}

public class ObjectWriter {
    public void writeValue(JsonGenerator jgen, @Nullable Object value);
}

/* ========================================================================== */
package com.fasterxml.jackson.databind.node;

public class ObjectNode {
    public @I @Nullable JsonNode get(String fieldName) @I;
    public ObjectNode put(String fieldName, @Nullable Double value);
}
