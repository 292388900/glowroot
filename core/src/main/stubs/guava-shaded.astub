import checkers.igj.quals.*;
import checkers.nullness.quals.*;

/* ========================================================================== */
package org.glowroot.shaded.google.common.base;

public class Objects {
    public static <T extends @Nullable Object> @NonNull T firstNonNull(T first, @NonNull T second);
    public static boolean equal(@Nullable Object a, @Nullable Object b);
    public static int hashCode(@Nullable Object... objects);
}

public class Objects$ToStringHelper {
    public ToStringHelper add(String name, @Nullable Object value);
}

public class Optional<T> {
    public static <T extends @Nullable Object> Optional<@NonNull T> fromNullable(
            T nullableReference);
}

public class Preconditions {
    @EnsuresNonNull("#1")
    public static <T extends @Nullable Object> T checkNotNull(@Nullable T reference);
    @EnsuresNonNull("#1")
    public static <T extends @Nullable Object> T checkNotNull(@Nullable T reference,
            @Nullable Object errorMessage);
}

public class Strings {
    @EnsuresNonNullIf(expression = "#1", result = false)
    public static boolean isNullOrEmpty(@Nullable String string);
    public static String nullToEmpty(@Nullable String string);
}

public class Throwables {
    public static <X extends Throwable> void propagateIfPossible(@Nullable Throwable throwable,
            Class<X> declaredType);
}

/* ========================================================================== */
package org.glowroot.shaded.google.common.collect;

@Immutable
public class ImmutableList<E extends @NonNull Object> {
    public static <E extends @NonNull Object> ImmutableList<E> of();
    public static <E extends @NonNull Object> ImmutableList<E> copyOf(
            @ReadOnly Collection<? extends E> elements);
    public static <E extends @NonNull Object> ImmutableList<E> copyOf(
            @ReadOnly Iterable<? extends E> elements);
}

public class ImmutableList$Builder<E extends @NonNull Object> {
    public Builder<E> addAll(@ReadOnly Iterable<? extends E> elements);
}

@Immutable
public class ImmutableMap<K extends @NonNull Object, V extends @NonNull Object> {
    public static <K extends @NonNull Object, V extends @NonNull Object> ImmutableMap<K, V> copyOf(
            @ReadOnly Map<? extends K, ? extends V> map);
}

@Immutable
public class ImmutableCollection<E extends @NonNull Object> {
    public boolean contains(@Nullable Object object);
}

@Immutable
public class ImmutableSet<E extends @NonNull Object> {
    public static <E extends @NonNull Object> ImmutableSet<E> copyOf(
            @ReadOnly Collection<? extends E> elements);
    public static <E extends @NonNull Object> ImmutableSet<E> copyOf(
            @ReadOnly Iterable<? extends E> elements);
}

public class Iterables {
    public static <T> Iterable<T> concat(@ReadOnly Iterable<? extends T> a,
        @ReadOnly Iterable<? extends T> b);
    public static <T> Iterable<T> filter(@ReadOnly Iterable<?> unfiltered, Class<T> type);
    public static <T> T[] toArray(@ReadOnly Iterable<? extends T> iterable, Class<T> type);
}

public class Lists {
    public static <E extends @Nullable Object> ArrayList<E> newArrayList();
    public static <E extends @Nullable Object> ArrayList<E> newArrayListWithCapacity(
            int initialArraySize);
    public static <E extends @Nullable Object> ArrayList<E> newArrayList(
            @ReadOnly Iterable<? extends E> elements);
    public static <T> List<T> reverse(@ReadOnly List<T> list);
    public static <E> CopyOnWriteArrayList<E> newCopyOnWriteArrayList(
            @ReadOnly Iterable<? extends E> elements);
}

public class Maps {
    public static <K extends @Nullable Object, V extends @Nullable Object>
            HashMap<K, V> newHashMap();
}

public class ObjectArrays {
     public static <T extends @Nullable Object> T[] concat(T[] array, T element);
}

public class Ordering<T> {
    public <E extends T> List<E> sortedCopy(@ReadOnly Iterable<E> iterable) @ReadOnly;
    public <E extends T> E max(@ReadOnly Iterable<E> iterable) @ReadOnly;
    public <S extends T> Ordering<S> reverse() @ReadOnly;
}

public class Queues {
    public static <E> ConcurrentLinkedQueue<E> newConcurrentLinkedQueue();
}

public class Sets {
    public static <E> HashSet<E> newHashSet(@ReadOnly Iterable<? extends E> elements);
    public static <E> SetView<E> difference(@ReadOnly Set<E> set1, @ReadOnly Set<?> set2);
}

/* ========================================================================== */
package org.glowroot.shaded.google.common.io;

public class CharSource {
    public Reader openStream() @ReadOnly;
    public long copyTo(Appendable appendable) @ReadOnly;
    public String read() @ReadOnly;
}

public class CharStreams {
    public static @Immutable CharSource asCharSource(String string);
}
