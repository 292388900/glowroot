syntax = "proto3";

import "Profile.proto";
import "Common.proto";

package org_glowroot_wire_api_model;

option java_package = "org.glowroot.wire.api.model";

message Trace {

  string id = 1; // this is a uuid
  Header header = 2;
  // each entry can have child entries (and each child entry can have child entries, etc)
  repeated Entry entry = 3;
  Profile main_thread_profile = 4;
  Profile aux_thread_profile = 5;

  message Header {
    bool partial = 2;
    bool slow = 3;
    int64 start_time = 4;
    int64 capture_time = 5;
    int64 duration_nanos = 6;
    string transaction_type = 7;
    string transaction_name = 8;
    string headline = 9;
    string user = 10;
    repeated Attribute attribute = 11;
    repeated DetailEntry detail_entry = 12;
    Error error = 13;
    Timer main_thread_root_timer = 14;
    repeated Timer aux_thread_root_timer = 15;
    repeated Timer async_root_timer = 16; // children are also async, so sum of time in children can
                                          // be greater than time in parent
    ThreadStats main_thread_stats = 17;
    ThreadStats aux_thread_stats = 18;
    repeated GarbageCollectionActivity gc_activity = 19;
    int64 entry_count = 20;
    bool entry_limit_exceeded = 21;
    int64 main_thread_profile_sample_count = 22;
    bool main_thread_profile_sample_limit_exceeded = 23;
    int64 aux_thread_profile_sample_count = 24;
    bool aux_thread_profile_sample_limit_exceeded = 25;
  }

  message Attribute {
    string name = 1;
    repeated string value = 2;
  }

  message DetailEntry {
    string name = 1;
    // one of these two (or neither for an empty value)
    repeated DetailValue value = 2;
    repeated DetailEntry child_entry = 3;
  }

  message DetailValue {
    oneof val {
      string string = 1;
      double double = 2;
      int64 long = 3;
      bool boolean = 4;
    }
  }

  message Error {
    string message = 1;
    Throwable exception = 2;
  }

  message Timer {
    string name = 1;
    bool extended = 2;
    int64 total_nanos = 3;
    int64 count = 4;
    // whether timer was active at the time of a partial trace capture
    bool active = 5;
    repeated Timer child_timer = 6;
  }

  message ThreadStats {
    OptionalInt64 total_cpu_nanos = 1;
    OptionalInt64 total_blocked_nanos = 2;
    OptionalInt64 total_waited_nanos = 3;
    OptionalInt64 total_allocated_bytes = 4;
  }

  message GarbageCollectionActivity {
    string collector_name = 1;
    int64 total_millis = 2;
    int64 count = 3;
  }

  message Entry {
    // start time relative to trace start
    int64 start_offset_nanos = 1;
    int64 duration_nanos = 2;
    // whether entry was active at the time of a partial trace capture
    bool active = 3;
    // message is empty for trace entries added using addErrorEntry()
    string message = 4;
    repeated DetailEntry detail_entry = 5;
    repeated StackTraceElement location_stack_trace_element = 6;
    Error error = 7;
    repeated Entry child_entry = 8;
  }
}
