syntax = "proto3";

import "AgentConfig.proto";
import "Aggregate.proto";
import "Trace.proto";
import "Common.proto";

package org_glowroot_wire_api_model;

option java_package = "org.glowroot.wire.api.model";

service CollectorService {
  rpc collectInit(InitMessage) returns (InitResponse);
  rpc collectAggregates(AggregateMessage) returns (EmptyMessage);
  rpc collectGaugeValues(GaugeValueMessage) returns (EmptyMessage);
  rpc collectTrace(TraceMessage) returns (EmptyMessage);
  rpc log(LogMessage) returns (EmptyMessage);
}

message InitMessage {
  string server_id = 1;
  SystemInfo system_info = 2;
  AgentConfig agent_config = 3;
}

message InitResponse {
  AgentConfig agent_config = 1;
}

message AggregateMessage {
  string server_id = 1;
  int64 capture_time = 2;
  repeated AggregatesByType aggregates_by_type = 3;
}

message GaugeValueMessage {
  string server_id = 1;
  repeated GaugeValue gauge_values = 2;
}

message TraceMessage {
  string server_id = 1;
  Trace trace = 2;
}

message LogMessage {
  string server_id = 1;
  LogEvent log_event = 2;
}

message SystemInfo {
  HostInfo host_info = 1;
  ProcessInfo process_info = 2;
  JavaInfo java_info = 3;
}

message HostInfo {
  string host_name = 1;
  int32 available_processors = 2;
  OptionalInt64 total_physical_memory_bytes = 3;
  string os_name = 4;
  string os_version = 5;
}

message ProcessInfo {
  OptionalInt64 process_id = 1;
  int64 start_time = 2;
}

message JavaInfo {
  string version = 1;
  string vm = 2;
  repeated string arg = 3;
  string heap_dump_default_dir = 4;
  string glowroot_agent_version = 15;
}

message GaugeValue {
  string gauge_name = 1;
  int64 capture_time = 2;
  // for counter gauges, value is the "average delta per second" of the counter, and weight is the
  // number of nanoseconds over which this average delta was calculated
  // for non-counter gauges, value is just the gauge value, and weight is 1
  double value = 3;
  int64 weight = 4;
}

message LogEvent {

  int64 timestamp = 1;
  Level level = 2;
  string logger_name = 3;
  string formatted_message = 4;
  Throwable throwable = 5;

  enum Level {
    NONE = 0;
    TRACE = 1;
    DEBUG = 2;
    INFO = 3;
    WARN = 4;
    ERROR = 5;
  }
}

message EmptyMessage {}
