syntax = "proto3";

import "Profile.proto";

package org_glowroot_wire_api_model;

option java_package = "org.glowroot.wire.api.model";

message AggregatesByType {
  string transaction_type = 1;
  Aggregate overall_aggregate = 2;
  repeated TransactionAggregate transaction_aggregate = 3;
}

message TransactionAggregate {
  string transaction_name = 2;
  Aggregate aggregate = 3;
}

// aggregate uses double instead of int64 to avoid (unlikely) 292 year nanosecond rollover
message Aggregate {

  double total_duration_nanos = 1;
  int64 transaction_count = 2;
  int64 error_count = 3;
  repeated Timer main_thread_root_timer = 4;
  repeated Timer aux_thread_root_timer = 5;
  repeated Timer async_root_timer = 6; // children are also async, so sum of time in children can
                                       // be greater than time in parent
  ThreadStats main_thread_stats = 7;
  ThreadStats aux_thread_stats = 8;
  Histogram duration_nanos_histogram = 9; // histogram values are in nanoseconds with microsecond
                                          // precision
  Profile main_thread_profile = 10;
  Profile aux_thread_profile = 11;
  repeated QueriesByType queries_by_type = 12;

  message OptionalDouble {
    double value = 1;
  }

  message Histogram {
    // for smaller numbers of transactions, the individual raw values are stored directly
    // these values are ordered for fast percentile calculation on retrieval
    repeated int64 ordered_raw_value = 1;
    // for larger numbers of transactions, the histogram is tracked and encoded using HdrHistogram
    bytes encoded_bytes = 2;
  }

  message Timer {
    // name is null for synthetic root
    string name = 1;
    bool extended = 2;
    double total_nanos = 3;
    int64 count = 4;
    repeated Timer child_timer = 5;
  }

  message ThreadStats {
    OptionalDouble total_cpu_nanos = 1;
    OptionalDouble total_blocked_nanos = 2;
    OptionalDouble total_waited_nanos = 3;
    OptionalDouble total_allocated_bytes = 4;
  }

  message QueriesByType {
    // e.g. "SQL", "CQL"
    string type = 1;
    repeated Query query = 2;
  }

  message Query {
    string text = 1;
    double total_duration_nanos = 2;
    int64 total_rows = 3;
    int64 execution_count = 4;
  }
}
